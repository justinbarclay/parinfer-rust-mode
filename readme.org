#+ATTR_HTML: :alt CirclCI
[[https://circleci.com/gh/justinbarclay/parinfer-smart-mode][https://circleci.com/gh/justinbarclay/parinfer-rust-mode.svg?style=svg]]
* Parinfer
  [[https://shaunlebron.github.io/parinfer/][Parinfer]] is a plugin that aims to make writing lisp simple. This library wraps [[https://github.com/justinbarclay/parinfer-rust][justinbarclay/parinfer-rust]] to provide an Emacs minor mode. parinfer-rust-mode aims to be a simpler adaptation of Parinfer that only offers "smart mode", leveraging the parinfer-rust plugin to do most of the heavy lifting.
** Capabilities:
   - Making code auto-adhere to formatting conventions
   - Influencing expression-nesting with indentation
   - Maintaining indentation when expressions shift
   - Allowing Paredit-like features without hot keys
** Requirements
   1. Emacs (25+) compiled with Dynamic Module support.
   2. Running on MacOS/Linux, with Windows support coming soon.
   3. (Optional) Curl - to download the library for you
** Installation
*** parinfer-rust-mode
**** From source
You can install ~parinfer-rust-mode~ from source (this github repo)
#+BEGIN_SRC shell
  cd /path/for/elisp-packages
  git clone git@github.com:justinbarclay/parinfer-rust-mode.git
#+END_SRC

After that add it to your load path and go wild.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/path/to/parinfer-rust-mode")
  (add-hook 'emacs-lisp-mode 'parinfer-rust-mode)
#+END_SRC

**** Use Package and Quelpa
Alternatively, you can tell something like [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]] to manage it for you.
#+BEGIN_SRC emacs-lisp
  (use-package parinfer-rust-mode
    :hook emacs-lisp-mode
    :quelpa ((parinfer-rust-mode
              :fetcher git
              :url "https://github.com/justinbarclay/parinfer-rust-mode.git")
             :upgrade nil))
#+END_SRC

*** parinfer-rust library
You'll also need to have the library installed on your system for you somewhere.
**** Option 1: Let Parinfer Rust install it for you
That's it. There are no instructions here. When parinfer-rust-mode prompts you to download the library, say yes. ~parinfer-rust-mode~ will then use curl to download ~parinfer-rust~ and save it in ~${EMACS_DIRECTORY}/parinfer-rust/~.

If you're curious, you can find the library files that parinfer-rust-mode downloads as release artifacts for [[https://github.com/eraserhd/parinfer-rust/releases/tag/v0.4.3][parinfer-rust]].

If you would always like parinfer-rust-mode to keep the library version in sync for you, automatically download it, then add the following line into your config:
#+BEGIN_SRC emacs-lisp
(setq parinfer-rust--auto-download-p 't)
#+END_SRC

If you are using the `use-package` snippet from above, that would look like:
#+BEGIN_SRC emacs-lisp
  (use-package parinfer-rust-mode
      :hook emacs-list-mode
      :quelpa ((parinfer-rust-mode
                :fetcher git
                :url "https://github.com/justinbarclay/parinfer-rust-mode.git")
               :upgrade nil)
      :init
      (setq parinfer-rust--auto-download-p 't))
#+END_SRC


**** Option 2: Building library from sources
For the more adventurous of you, you can also download the ~parinfer-rust~ library from source and compile it.
***** Step 1: Build the Parinfer Rust library
     When compiling manually the library name differs from platform to platform. Additionally, Emacs expects that these libraries have specific file extensions when first loading them up. This is a problem for MacOS because Rust compiles it as ~.dylib~ and we'll need to give the file an ~.so~ extension when we copy it to it's final location.

     | Platform | File name              | Required extension |
     |----------+------------------------+--------------------|
     | Linux    | libparinfer_rust.so    | .so                |
     | MacOS    | libparinfer_rust.dylib | .so                |
     | Windows  | parinfer_rust.dll      | .dll               |

     #+BEGIN_SRC shell
       git clone https://github.com/eraserhd/parinfer-rust.git
       cd parinfer-rust
       cargo build --release
       cp ./target/release/${library-name} ~/.emacs.d/parinfer-rust/${lib-name}
     #+END_SRC
***** Step 2: Configure parinfer-rust-mode
     Once you have compiled the libraries from source code you'll need to tell ~parinfer-rust-mode~ how to find these libraries
     #+BEGIN_SRC elisp
       (setq parinfer-rust-library "/path/to/parinfer-rust-library.so")
     #+END_SRC

** Commands
   | Key   | Command                    | Description                                                                                                                            |
   |-------+----------------------------+----------------------------------------------------------------------------------------------------------------------------------------|
   | C-c s | parinfer-switch-mode       | Quickly switch between paren, indent, and smart modes                                                                                  |
   | C-c d | Disable parinfer-rust-mode | Sometimes you need to make a change or undo things quickly and the easiest way to accomplish that is with parinfer-rust-mode disabled. |

** Modes
   Parinfer can operate under three different modes when writing lisp.
*** Paren
    Paren Mode gives you full control of parens, while Parinfer corrects indentation. You can still adjust indentation, but you won't be able to indent/dedent past certain boundaries set by parens on previous lines.

    [[./videos/paren-mode.gif]]
*** Indent
    Indent Mode gives you full control of indentation, while Parinfer corrects or inserts close-parens where appropriate. Specifically, it only touches the groups of close-parens at the end of each line.

    [[./videos/indent-mode.gif]]
*** Smart
    Smart Mode is like Indent Mode, but it tries to preserve the structure too.

    [[./videos/smart-mode.gif]]
** parinfer-mode
   There is an alternate implementation of Parinfer for Emacs called [[https://github.com/DogLooksGood/parinfer-mode][parinfer-mode]]. It currently has support for Parinfer's "paren" and "indent". Additionally, it has had experimental support for "smart" mode, however, this has remained hidden on a branch and not accessible from MELPA for over a year.
   parinfer-smart-mode aims to be a simpler adaptation of Parinfer that just offers "smart mode", leveraging the parinfer-rust plugin to do most of the heavy lifting.
** Known Issues
   - This is still alpha software and parinfer-rust has been known to get ~Out of Memory~ warnings and cause Emacs to crash, so use at your own risk.
   - Multiple cursors do not work as intended
   - Does not play well with other modes that insert parens or manage whitespace. If you have modes like electric-pair-mode or hungry-delete-mode enabled, you may want to disable them for any mode that has parinfer-rust-mode enabled. To help users work around this we offer to disable known troublesome modes if we detect them.

** Contributing
If you'd like to help contribute to the development of ~parinfer-rust-mode~ the only caveat interesting section of note is the testing framework. 

~parinfer-rust-mode~ relies on [[https://github.com/cask/cask][Cask]] to manage development libraries and to set-up the tests themselves.

Then after you have made some changes just run:
#+BEGIN_SRC shell
PARINFER_RUST_TEST=true make test
#+END_SRC

And you should get something like:
#+BEGIN_SRC shell
✦ ❯ PARINFER_RUST_TEST=true make test
emacs --version
GNU Emacs 28.0.50
Copyright (C) 2020 Free Software Foundation, Inc.
GNU Emacs comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of GNU Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
cask build
Compiling /home/justin/dev/parinfer-rust-mode/parinfer-helper.el...
Compiling /home/justin/dev/parinfer-rust-mode/parinfer-rust-mode-autoloads.el...
Compiling /home/justin/dev/parinfer-rust-mode/parinfer-rust-mode.el...

In toplevel form:
parinfer-rust-mode.el:72:1: Error: Symbol’s value as variable is void: parinfer-rust-library
Compiling /home/justin/dev/parinfer-rust-mode/test-helper.el...
cask exec ert-runner test/**.el --quiet
...............................................................................................................................................

Ran 143 tests in 0.061 seconds
#+END_SRC
** Thanks
   - Shaun Lebron for creating Parinfer
   - Jason Felice for creating and maintaining the parinfer-rust project
   - tianshu for helping me fall in love with parinfer-mode in Emacs.
